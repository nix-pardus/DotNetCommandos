@page "/employees"
@using UI.Components
@using UI.Models
@using UI.Services
@inject IEmployeeService EmployeeService

<h3>Сотрудники</h3>

@if (employees == null)
{
	<p>Список загружается...</p>
}
else if (employees.Count == 0)
{
	<p>Сотрудники не найдены.</p>
}
else
{
	<GenericTable TItem="Employee"
				  Items="employees"
				  @bind-SelectedItem="selectedEmployee"
				  @bind-HighlightedItem="highlightedEmployee"
				  Columns="employeeColumns">

		<ActionPanelTemplate Context="employee">
			<AdaptiveDiv DesktopClass="btn-group" MobileClass="btn-group-vertical" Role="group" AriaLabel="Basic mixed styles example">
				<button type="button" class="btn btn-primary" @onclick="() => ViewDetails(employee)">Просмотр</button>
				@if (employee.Role.HasFlag(RoleType.Мастер))
				{
					<button type="button" class="btn btn-primary" @onclick="() => ViewDetails(employee)">Назначить на заказ</button>
				}
				<button type="button" class="btn btn-primary" @onclick="() => CopyInfo(employee)">Копировать</button>
				<button type="button" class="btn btn-primary" @onclick="() => SendEmail(employee)">Отправить Email</button>
				<button type="button" class="btn btn-primary" @onclick="() => EditEmployee(employee)">Редактировать</button>
				<button type="button" class="btn btn-danger" @onclick="() => DeleteEmployee(employee)">Удалить</button>
			</AdaptiveDiv>
		</ActionPanelTemplate>

	</GenericTable>
}

@code {
	public List<Employee> employees;

	private Employee? selectedEmployee;
	private Employee? highlightedEmployee;

	private List<TableColumn<Employee>> employeeColumns = new()
	{
		new TableColumn<Employee>
		{
			Header = "Полное имя",
			ValueSelector = e => e.FullName
		},
		new TableColumn<Employee>
		{
			Header = "Домашний адрес",
			ValueSelector = e => e.Address
		},
		new TableColumn<Employee>
		{
			Header = "Email",
			ValueSelector = e => e.Email
		},
		new TableColumn<Employee>
		{
			Header = "Номер телефона",
			ValueSelector = e => e.PhoneNumber
		},
		new TableColumn<Employee>
		{
			Header = "Роль",
			ValueSelector = e => e.Role
		}
	};

	protected override async Task OnInitializedAsync()
	{
		try
		{
			employees = await EmployeeService.GetAllEmployeesAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading employees: {ex.Message}");
		}
	}

	private void EditEmployee(Employee employee)
	{
		//TODO: Реализовать логику редактирования сотрудника
		Console.WriteLine($"Editing employee: {employee.FullName}");
	}

	private void ViewDetails(Employee employee)
	{
		//TODO: Реализовать логику просмотра деталей сотрудника
		Console.WriteLine($"Viewing details for employee: {employee.FullName}");
	}

	private void SendEmail(Employee employee)
	{
		//TODO: Реализовать логику отправки email сотруднику
		Console.WriteLine($"Sending email to: {employee.Email}");
	}

	private void CopyInfo(Employee employee)
	{
		//TODO: Реализовать логику копирования информации о сотруднике
		Console.WriteLine($"Copying info for employee: {employee.FullName}");
	}

	private void DeleteEmployee(Employee employee)
	{
		//TODO: Реализовать логику удаления сотрудника
		Console.WriteLine($"Deleting employee: {employee.FullName}");
	}
}
